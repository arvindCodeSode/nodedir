<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Article;
use Validator;

class ArticleController extends Controller
{
    public function create(Request $request)
    {
        #write your code for article creation here...
        #model name = Article
        #table name = article
        #table fields = id,title,content,author,category,published_at
        #all fields are required

        $rules = [
          'title'=>'required|max:30',
          'content'=>'required',
          'author'=>'required',
          'category'=>'required',
          'published_at'=>'required'

        ];
        if( empty($request->title) && strlen($request->title) < 30  )
        {
            return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
        }
        if( empty($request->content)  )
        {
            return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);

        }
        if( empty($request->author)  )
        {
            return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);

        }
        if( empty($request->category)  )
        {
            return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);

        }
        if( empty($request->published_at)  )
        {
            return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);

        }

        
        // $validate = Validator::make($request->all(),$rules);
        // if($validate->fails())
        // {
        //   $response=[
        //     'status'=>false,
        //     'message'=>$validate->errors(),
        //   ];
        //   return response()->json($response,400);
        // }
        // $id=1;
        $articles =  New Article();
        $articles->title =$request->title;
        // $articles->id = rand(1000,9999);

        $articles->content =$request->content;
        $articles->author =$request->author;
        $articles->category =$request->category;
        $articles->published_at =$request->published_at;
        $save  = $articles->save();
        if( $save )
        {
          return response()->json($articles,201);
        }
        else{
          return response()->json([
            'status'=>false,
              'message'=>'Some Unknown error, please try again',
          ],400);

        }
 
    }

    public function getAll()
    {
        #write your code to get all articles...
        #model name = Article
        #table name = article
        #table fields = id,title,content,author,category,published_at
        $articles = Article::all();
       // return $articles;
        return response()->json($articles,200);
    }

    public function get(Request $request, $articleId)
    {
        #write your code to get all article specific by id...
        #model name = Article
        #table name = article
        #table fields = id,title,content,author,category,published_at

        $articles = Article::find($articleId);
        if($articles)
        {
            return response()->json($articles,200);
        }else{
          return response()->json([
              'errMsg'=>'ArticleDoesnotExists'
            ],404);

        }
    }

    public function update(Request $request, $articleId)
    {
        #write your code to update article specific by id...
        #model name = Article
        #table name = article
        #table fields = id,title,content,author,category,published_at

        $articles = Article::find($articleId);
        if($articles)
        {
            // $rules = [
            //   'title'=>'required|max:30',
            //   'content'=>'required',
            //   'author'=>'required',
            //   'category'=>'required',
            //   'published_at'=>'required'

            // ];
            // $validate = Validator::make($request->all(),$rules);
            // if($validate->fails())
            // {
            //   $response=[
            //     'status'=>false,
            //     'message'=>$validate->errors(),
            //   ];
            //   return response()->json($response,400);

            // }
            if( empty($request->title) && strlen($request->title) < 30  )
            {
                return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
            }
            if( empty($request->content)  )
            {
                return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
    
            }
            if( empty($request->author)  )
            {
                return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
    
            }
            if( empty($request->category)  )
            {
                return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
    
            }
            if( empty($request->published_at)  )
            {
                return response()->json(['errMsg'=>'MandatoryFieldsNotComplete'],400);
    
            }
            $articles->title =$request->title;
            $articles->content =$request->content;
            $articles->author =$request->author;
            $articles->category =$request->category;
            $articles->published_at =$request->published_at;
            if($articles->save())
            {
              return response()->json($articles,200);
            }else{
              return response()->json([
                'status'=>false,
                'message'=>'Some Unknown Error!',
              ],400);
            }
            
        }else{
          return response()->json([
            'errMsg'=>'ArticleDoesnotExists',
          ],404);
        }
    }

    public function delete(Request $request, $articleId)
    {
        #write your code to delete article specific by id...
        #model name = Article
        #table name = article
        #table fields = id,title,content,author,category,published_at

        $articles = Article::find($articleId);
        if($articles)
        {
            if($articles->delete())
            {
              return response()->json([
                'status'=>true,
                'message'=>'Article deleted successfuly',
              ],200);
            }
            
        }
        return response()->json([
          'errMsg'=>'ArticleDoesnotExists',
        ],404);
    }
}
 